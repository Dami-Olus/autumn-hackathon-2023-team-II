{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction Cravings(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedMeal = _useState2[0],\n    setSelectedMeal = _useState2[1];\n  var mealTypes = [{\n    label: \"Breakfast\"\n  }, {\n    label: \"Brunch\"\n  }, {\n    label: \"Lunch/Dinner\"\n  }, {\n    label: \"Snack\"\n  }, {\n    label: \"Teatime\"\n  }];\n  useEffect(function () {\n    console.log(selectedMeal);\n  }, [selectedMeal]);\n  var handleMealSelection = function handleMealSelection(mealType) {\n    setSelectedMeal(mealType.label);\n  };\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.heading,\n      children: \"What type of meal are we having?\"\n    }), mealTypes.map(function (mealType, index) {\n      return _jsx(TouchableOpacity, {\n        style: [styles.mealButton, selectedMeal === mealType.label && styles.selectedMealButton],\n        onPress: function onPress() {\n          return handleMealSelection(mealType);\n        },\n        children: _jsx(Text, {\n          style: styles.buttonLabel,\n          children: mealType.label\n        })\n      }, index);\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: '#FFF'\n  },\n  heading: {\n    fontSize: 20,\n    marginBottom: 20\n  },\n  mealButton: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginVertical: 10,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: \"#ccc\",\n    borderRadius: 7,\n    height: 56,\n    width: 305,\n    paddingHorizontal: 16,\n    boxShadow: \"0px 4px 4px 0px rgba(0, 0, 0, 0.25)\",\n    backgroundColor: 'rgb(182,126,41)'\n  },\n  selectedMealButton: {\n    backgroundColor: \"lightblue\"\n  },\n  buttonImage: {\n    width: 24,\n    height: 24\n  },\n  buttonLabel: {\n    fontSize: 16,\n    color: '#FFF',\n    fontStyle: 'normal',\n    fontWeight: '500',\n    fontFamily: 'Poppins'\n  }\n});\nexport default Cravings;","map":{"version":3,"names":["React","useState","useEffect","SafeAreaView","Text","View","TouchableOpacity","Image","StyleSheet","jsx","_jsx","jsxs","_jsxs","Cravings","_ref","navigation","_useState","_useState2","_slicedToArray","selectedMeal","setSelectedMeal","mealTypes","label","console","log","handleMealSelection","mealType","style","styles","container","children","heading","map","index","mealButton","selectedMealButton","onPress","buttonLabel","create","flex","alignItems","justifyContent","backgroundColor","fontSize","marginBottom","flexDirection","marginVertical","padding","borderWidth","borderColor","borderRadius","height","width","paddingHorizontal","boxShadow","buttonImage","color","fontStyle","fontWeight","fontFamily"],"sources":["/Users/marcoruiz/code/autumn-hackathon-2023-team-II/screens/Cravings.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { SafeAreaView, Text, View, TouchableOpacity, Image, StyleSheet } from \"react-native\";\n\nfunction Cravings({ navigation }) {\n  const [selectedMeal, setSelectedMeal] = useState(null);\n\n  const mealTypes = [\n    { label: \"Breakfast\", },\n    { label: \"Brunch\",  },\n    { label: \"Lunch/Dinner\",  },\n    { label: \"Snack\", },\n    { label: \"Teatime\",  },\n  ];\n\n  useEffect(() => {\n    console.log(selectedMeal);\n  }, [selectedMeal]);\n\n  const handleMealSelection = (mealType) => {\n    setSelectedMeal(mealType.label);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text style={styles.heading}>What type of meal are we having?</Text>\n      {mealTypes.map((mealType, index) => (\n        <TouchableOpacity\n          key={index}\n          style={[\n            styles.mealButton,\n            selectedMeal === mealType.label && styles.selectedMealButton\n          ]}\n          onPress={() => handleMealSelection(mealType)}\n        >\n          {/* <Image source={mealType.image} style={styles.buttonImage} /> */}\n          <Text style={styles.buttonLabel}>{mealType.label}</Text>\n        </TouchableOpacity>\n      ))}\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: '#FFF'\n  },\n  heading: {\n    fontSize: 20,\n    marginBottom: 20,\n  },\n  mealButton: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginVertical: 10,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: \"#ccc\",\n    borderRadius: 7,\n    height: 56,\n    width: 305,\n    paddingHorizontal: 16,\n    boxShadow: \"0px 4px 4px 0px rgba(0, 0, 0, 0.25)\",\n    backgroundColor: 'rgb(182,126,41)'\n  },\n  selectedMealButton: {\n    backgroundColor: \"lightblue\",\n  },\n  buttonImage: {\n    width: 24,\n    height: 24,\n  },\n  buttonLabel: {\n    fontSize: 16,\n    color: '#FFF',\n    fontStyle: 'normal',\n    fontWeight: '500',\n    fontFamily: 'Poppins'\n  },\n});\n\nexport default Cravings;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}